/*
 * stm32f407xx_i2c_driver.c
 *
 *  Created on: 2 nov. 2020
 *      Author: ange
 */

#include "stm32f407xx_i2c_driver.h"

/*
 * Define helper functions
 */
static uint32_t rcc_get_pll_output_clk();
static uint32_t rcc_get_pclk1_value();
static void i2c_generate_start_condition(i2c_reg_t *arg_poi2c_reg);
static void i2c_generate_stop_condition(i2c_reg_t *arg_poi2c_reg);
static void i2c_clear_ADDR_flag(i2c_handle_t *arg_poi2c_handler);
static void i2c_execute_addr_phase_write(i2c_reg_t *arg_poi2c_reg,
		uint8_t arg_u8slave_addr);
static void i2c_execute_addr_phase_read(i2c_reg_t *arg_poi2c_reg,
		uint8_t arg_u8slave_addr);

/*
 * Define constant I2C specification
 */
/*!< rise time of both SDA and SCL signals*/
#define RISE_FREQ_SM_MAX		(1000000U) //  1000 ns => 1000000Hz
#define RISE_FREQ_FM_MAX		((10000000U) / (3U)) // 300 ns => 10000000/3Hz
#define RISE_FREQ_FM_PLUS_MAX	((25000000U) / (3U)) // 120 ns => 25000000/3Hz

void i2c_manage_ack(i2c_reg_t *arg_poi2c_reg, uint8_t arg_u8en_or_di) {
	if (I2C_ACK_EN == arg_u8en_or_di) {
		arg_poi2c_reg->CR1 |= (SET << I2C_CR1_ACK);
	} else if (I2C_ACK_DI == arg_u8en_or_di) {
		arg_poi2c_reg->CR1 &= ~(SET << I2C_CR1_ACK);
	}
}

static void i2c_execute_addr_phase_write(i2c_reg_t *arg_poi2c_reg,
		uint8_t arg_u8slave_addr) {
	arg_u8slave_addr = (uint8_t) (arg_u8slave_addr << SHIFT_ONE);
	arg_u8slave_addr &= ~(ONE_BIT);
	arg_poi2c_reg->DR = arg_u8slave_addr;
}

static void i2c_execute_addr_phase_read(i2c_reg_t *arg_poi2c_reg,
		uint8_t arg_u8slave_addr) {
	arg_u8slave_addr = (uint8_t) (arg_u8slave_addr << SHIFT_ONE);
	arg_u8slave_addr |= ONE_BIT;
	arg_poi2c_reg->DR = arg_u8slave_addr;
}

static void i2c_clear_ADDR_flag(i2c_handle_t *arg_poi2c_handler) {
	if (arg_poi2c_handler->m_poi2c_reg->SR2 & (I2C_SR2_MSL)) {
		/*!< master mode >*/
		if (I2C_BUSY_IN_RX == arg_poi2c_handler->m_u8rx_tx_state) {
			if (1U == arg_poi2c_handler->m_u32rx_size) {
				/*!< first disable the ack >*/
				i2c_manage_ack(arg_poi2c_handler->m_poi2c_reg, I2C_ACK_DI);
				/*!< clear ADDR flag >*/
				uint32_t loc_u32dummy_read_sr = arg_poi2c_handler->m_poi2c_reg->SR1;
				loc_u32dummy_read_sr = arg_poi2c_handler->m_poi2c_reg->SR2;
				(void) loc_u32dummy_read_sr; // unused variable
			}
		} else {
			uint32_t loc_u32dummy_read_sr = arg_poi2c_handler->m_poi2c_reg->SR1;
			loc_u32dummy_read_sr = arg_poi2c_reg->SR2;
			(void) loc_u32dummy_read_sr; // unused variable
		}
	} else {
		/*!< slave mode >*/
		uint32_t loc_u32dummy_read_sr = arg_poi2c_reg->SR1;
		loc_u32dummy_read_sr = arg_poi2c_reg->SR2;
		(void) loc_u32dummy_read_sr; // unused variable
	}
}

static uint32_t rcc_get_pll_output_clk() {
	uint32_t loc_u32pll_output_clk = 0U;
	return loc_u32pll_output_clk;
}

static uint32_t rcc_get_pclk1_value() {
	uint32_t loc_u32pclk1 = 0U;
	uint8_t loc_u8clk_src = (uint8_t) ((RCC->CFGR >> RCC_CFGR_SW1) & TWO_BIT);
	/*!< find the clock source*/
	if (IS_HSE_SYSTEM_CLK == loc_u8clk_src) {
		loc_u32pclk1 = 8000000U; // 8MHZ
	} else if (IS_HSI_SYSTEM_CLK == loc_u8clk_src) {
		loc_u32pclk1 = 16000000U; //16MHZ
	} else if (IS_PLL_SYSTEM_CLK == loc_u8clk_src) {
		loc_u32pclk1 = rcc_get_pll_output_clk();
	}

	uint8_t loc_u8AHB_prescaler = (uint8_t) ((RCC->CFGR >> RCC_CFGR_HPRE)
			& FOUR_BIT);
	if (loc_u8AHB_prescaler > 7U) {
		uint16_t loc_au16AHBprescaler_div[] = { 2U, 4U, 8U, 16U, 64U, 128U,
				256U, 512U };
		loc_u32pclk1 /=
				loc_au16AHBprescaler_div[loc_u8AHB_prescaler & THREE_BIT];
	}

	uint8_t loc_u8APB1_prescaler = (uint8_t) ((RCC->CFGR >> RCC_CFGR_PPRE1)
			& THREE_BIT);
	if (loc_u8APB1_prescaler > 3U) {
		uint8_t loc_u8APB1_prescaler_div[] = { 2U, 4U, 8U, 16U };
		loc_u32pclk1 /= loc_u8APB1_prescaler_div[loc_u8AHB_prescaler & TWO_BIT];
	}

	return loc_u32pclk1;
}

static void i2c_generate_start_condition(i2c_reg_t *arg_poi2c_reg) {
	arg_poi2c_reg->CR1 |= (SET << I2C_CR1_START);
}

static void i2c_generate_stop_condition(i2c_reg_t *arg_poi2c_reg) {
	arg_poi2c_reg->CR1 |= (SET << I2C_CR1_STOP);
}

void i2c_peri_clock_control(i2c_reg_t *arg_ptr_i2c,
		uint8_t arg_u8enable_or_disable) {
	switch ((int32_t) arg_ptr_i2c) {
	case (int32_t) I2C1:
		if (ENABLE == arg_u8enable_or_disable) {
			I2C1_PCLK_EN();
		} else if (DISABLE == arg_u8enable_or_disable) {
			I2C1_PCLK_DI();
		}
		break;
	case (int32_t) I2C2:
		if (ENABLE == arg_u8enable_or_disable) {
			I2C2_PCLK_EN();
		} else if (DISABLE == arg_u8enable_or_disable) {
			I2C2_PCLK_DI();
		}
		break;
	case (int32_t) I2C3:
		if (ENABLE == arg_u8enable_or_disable) {
			I2C3_PCLK_EN();
		} else if (DISABLE == arg_u8enable_or_disable) {
			I2C3_PCLK_DI();
		}
		break;
	default:
		break;
	}
}

void i2c_de_init(i2c_reg_t *arg_ptr_i2c) {
	switch ((uint32_t) arg_ptr_i2c) {
	case (uint32_t) I2C1:
		I2C1_RST();
		break;
	case (uint32_t) I2C2:
		I2C2_RST();
		break;
	case (uint32_t) I2C3:
		I2C3_RST();
		break;
	default:
		break;
	}
}

void i2c_irq_config(uint8_t arg_irq_number, uint8_t arg_irq_priority,
		uint8_t arg_enable_or_disable) {
	uint8_t loc_u8nvic_iser_index = arg_irq_number / 32U;
	uint8_t loc_u8nvic_iser_shift = arg_irq_number % 32U;
	if (ENABLE == arg_enable_or_disable) {
		NVIC_ISER[loc_u8nvic_iser_index] |= (SET << loc_u8nvic_iser_shift);
		uint8_t loc_u8nvic_iser_ipr_index = arg_irq_number / 4U;
		uint8_t loc_u8nvic_ipr_shift = (arg_irq_number % 4U) * 8U + 4U;
		NVIC_IPR[loc_u8nvic_iser_ipr_index] |= (arg_irq_priority
				<< loc_u8nvic_ipr_shift);
	} else if (DISABLE == arg_enable_or_disable) {
		NVIC_ICER[loc_u8nvic_iser_index] |= (SET << loc_u8nvic_iser_shift);
	}
}

void I2C_EV_IRQHandler(i2c_handle_t *arg_poi2c_handler) {
	uint8_t loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg, I2C_FLAG_SB));
	uint8_t loc_u8is_irq_expected = arg_poi2c_handler->m_poi2c_reg->CR2
			& (SET << I2C_CR2_ITEVTEN);
	/*!< Handle SB IRQ >*/
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {
		/*!< the interrupt is generated by SB event
		 * This block will not be executed in slave mode because for slave SB is always zero
		 * The address phase must be execute here >*/
		if (I2C_BUSY_IN_TX == arg_poi2c_handler->m_u8rx_tx_state) {
			i2c_execute_addr_phase_write(arg_poi2c_handler->m_poi2c_reg,
					arg_poi2c_handler->m_u8dev_addr);
		} else if (I2C_BUSY_IN_RX == arg_poi2c_handler->m_u8rx_tx_state) {
			i2c_execute_addr_phase_read(arg_poi2c_handler->m_poi2c_reg,
					arg_poi2c_handler->m_u8dev_addr);
		}
	}

	/*!< Handle ADDR IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_ADDR));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {
		i2c_clear_ADDR_flag(arg_poi2c_handler);
	}

	/*!< Handle ADD10 IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_ADD10));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

	/*!< Handle STOPF IRQ
	 * Only in slave mode>*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_STOPF));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {
		/*!< Clear the STOPF i.e 1. read SR1 2. write to CR1 >*/
		arg_poi2c_handler->m_poi2c_reg->CR1 |= 0x0000;
		/*!< notify the application that STOP is detected >*/
		i2c_app_callback(arg_poi2c_handler, I2C_EV_STOP);
	}

	/*!< Handle BTF IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_BTF));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {
		if (I2C_BUSY_IN_TX == arg_poi2c_handler->m_u8rx_tx_state) {
			//make sure that TXE is also set
			if (FLAG_SET == i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_TXE)) {
				if (arg_poi2c_handler->m_u32tx_len <= 0U) {
					/*!< generate the stop condition >*/
					if (I2C_REPEAT_START_NO == arg_poi2c_handler->m_u8sr) {
						i2c_generate_stop_condition(
								arg_poi2c_handler->m_poi2c_reg);
					}
					/*!< reset all the members elements of the handle structure >*/
					i2c_close_send_data();
					/*!< notify the application >*/
					i2c_app_callback(arg_poi2c_handler, I2C_EV_TX_CMPLT);
				}
			}
		} else if (I2C_BUSY_IN_RX == arg_poi2c_handler->m_u8rx_tx_state) {
		}
	}

	uint8_t loc_u8is_buffer_irq_expected = arg_poi2c_handler->m_poi2c_reg->CR2
			& (SET << I2C_CR2_ITBUFEN);

	/*!< Handle TxE IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_TXE));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened
			&& loc_u8is_buffer_irq_expected) {
		if (arg_poi2c_handler->m_poi2c_reg->SR2 & (SET << I2C_SR2_MSL)) {
			if (I2C_BUSY_IN_TX == arg_poi2c_handler->m_u8rx_tx_state) {
				if (arg_poi2c_handler->m_u32tx_len > 0) {
					arg_poi2c_handler->m_poi2c_reg->DR =
							*(arg_poi2c_handler->m_pu8tx_buffer);
					++arg_poi2c_handler->m_pu8tx_buffer;
					--arg_poi2c_handler->m_u32tx_len;
				}
			}
		}
	}

	/*!< Handle RxNE IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_RXNE));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened
			&& loc_u8is_buffer_irq_expected) {
		if (I2C_BUSY_IN_RX == arg_poi2c_handler->m_u8rx_tx_state) {
			if (arg_poi2c_handler->m_u32rx_size <= 1U) {
				*(arg_poi2c_handler->m_pu8rx_buffer) = (uint8_t) arg_poi2c_handler->m_poi2c_reg->DR;
				++arg_poi2c_handler->m_pu8rx_buffer;
				--arg_poi2c_handler->m_u32rx_len;
			} else {
				if (2U == arg_poi2c_handler->m_u32rx_len) {
					/*!< Disable acking*/
					i2c_manage_ack(arg_poi2c_handler->m_poi2c_reg, I2C_ACK_DI);
				}
				*(arg_poi2c_handler->m_pu8rx_buffer) = (uint8_t) arg_poi2c_handler->m_poi2c_reg->DR;
				++arg_poi2c_handler->m_pu8rx_buffer;
				--arg_poi2c_handler->m_u32rx_len;
			}
			if (0U == arg_poi2c_handler->m_u32rx_len) {
				/*!< Generate the stop condition >*/
				i2c_generate_stop_condition(arg_poi2c_handler->m_poi2c_reg);

				/*!< Close the i2c rx >*/
				i2c_close_receive_data();

				/*!< Notify the APP >*/
				i2c_app_callback(arg_poi2c_handler, I2C_EV_RX_CMPLT);
			}
		}
	}
}

void I2C_ER_IRQHandler(i2c_handle_t *arg_poi2c_handler) {
	/*!< Handle BERR IRQ >*/
	uint8_t loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_BERR));
	uint8_t loc_u8is_irq_expected = arg_poi2c_handler->m_poi2c_reg->CR2
			& (SET << I2C_CR2_ITERREN);
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

	/*!< Handle ARLO IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_ARLO));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

	/*!< Handle AF IRQ : applicable only in master mode>*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_AF));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

	/*!< Handle OVR IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_OVR));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

	/*!< Handle PECERR IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_PECERR));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

	/*!< Handle TIMEOUT IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_TIMEOUT));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

	/*!< Handle SMBALERT IRQ >*/
	loc_u8is_irq_happened = (FLAG_SET
			== i2c_get_flag_status(arg_poi2c_handler->m_poi2c_reg,
			I2C_FLAG_SMBALERT));
	if (loc_u8is_irq_expected && loc_u8is_irq_happened) {

	}

}

void i2c_control(i2c_reg_t *arg_ptr_i2c, uint8_t arg_u8enable_or_disable) {
	if (ENABLE == arg_u8enable_or_disable) {
		arg_ptr_i2c->CR1 |= (SET << I2C_CR1_PE);
	} else if (DISABLE == arg_u8enable_or_disable) {
		arg_ptr_i2c->CR1 &= ~(SET << I2C_CR1_PE);
	}
}

void i2c_init(i2c_handle_t *arg_ptr_oi2c_handler) {
	/*!< enable clock for the i2cx peripheral*/
	i2c_peri_clock_control(arg_ptr_oi2c_handler->m_poi2c_reg, ENABLE);
	/*!< Configure the mode (standard or fast)*/
	/*!< Configure the speed of the SCL : FREQ field of CR2*/
	arg_ptr_oi2c_handler->m_poi2c_reg->CR2 &= ~(SIX_BIT << I2C_CR2_FREQ);
	arg_ptr_oi2c_handler->m_poi2c_reg->CR2 |= (uint8_t) ((rcc_get_pclk1_value()
			/ 1000000U) & (SIX_BIT));

	/*!< Configure the device address mode (7 bits or 10 bits)*/
	arg_ptr_oi2c_handler->m_poi2c_reg->OAR1 &= ~(SET << I2C_OAR1_ADDMODE); // clear for 7 bits modes

	/*!< Configure the device own address (Applicable when the device is slave)*/
	arg_ptr_oi2c_handler->m_poi2c_reg->OAR1 &= ~(SEVEN_BIT << I2C_OAR1_ADD71);
	arg_ptr_oi2c_handler->m_poi2c_reg->OAR1 |=
			(arg_ptr_oi2c_handler->m_poi2c_sconfig->device_addr & SEVEN_BIT);

	/*!< Reserved Bit 14 Should always be kept at 1 by software.*/
	arg_ptr_oi2c_handler->m_poi2c_reg->OAR1 |= (SET << I2C_OAR1_RSV14);

	/*!< CCR calculation*/
	uint16_t loc_u16ccr_value = 0U;
	if (arg_ptr_oi2c_handler->m_poi2c_sconfig->scl_speed <= I2C_SCL_SPEED_SM) {
		/*!< standard mode*/
		loc_u16ccr_value = (uint16_t) (rcc_get_pclk1_value()
				/ (2 * arg_ptr_oi2c_handler->m_poi2c_sconfig->scl_speed));
	} else {
		/*!< fast mode*/
		arg_ptr_oi2c_handler->m_poi2c_reg->CCR |= (SET << I2C_CCR_FS);
		if (I2C_FM_DUTY_16_9
				== arg_ptr_oi2c_handler->m_poi2c_sconfig->fm_duty_cycle) {
			arg_ptr_oi2c_handler->m_poi2c_reg->CCR |= (SET << I2C_CCR_DUTY);
			loc_u16ccr_value = (uint16_t) (rcc_get_pclk1_value()
					/ (25 * arg_ptr_oi2c_handler->m_poi2c_sconfig->scl_speed));
		} else if (I2C_FM_DUTY_2
				== arg_ptr_oi2c_handler->m_poi2c_sconfig->fm_duty_cycle) {
			arg_ptr_oi2c_handler->m_poi2c_reg->CCR &= ~(SET << I2C_CCR_DUTY);
			loc_u16ccr_value = (uint16_t) (rcc_get_pclk1_value()
					/ (3 * arg_ptr_oi2c_handler->m_poi2c_sconfig->scl_speed));
		}
	}
	arg_ptr_oi2c_handler->m_poi2c_reg->CCR &= ~(TWELVEBIT << I2C_CCR_CCR);
	arg_ptr_oi2c_handler->m_poi2c_reg->CCR |= (loc_u16ccr_value & TWELVEBIT);

	/*!< Configure the mode rise time for I2C*/
	uint8_t loc_u8trise = 1;
	if (arg_ptr_oi2c_handler->m_poi2c_sconfig->scl_speed <= I2C_SCL_SPEED_SM) {
		/*!< standard mode*/
		loc_u8trise += (uint8_t) (rcc_get_pclk1_value() / RISE_FREQ_SM_MAX);
	} else if (arg_ptr_oi2c_handler->m_poi2c_sconfig->scl_speed
			<= I2C_SCL_SPEED_FM2K) {
		/*!< fast mode*/
		loc_u8trise += (uint8_t) (rcc_get_pclk1_value() / RISE_FREQ_FM_MAX);
	} else if (arg_ptr_oi2c_handler->m_poi2c_sconfig->scl_speed
			<= I2C_SCL_SPEED_FM4K) {
		/*!< fast mode*/
		loc_u8trise +=
				(uint8_t) (rcc_get_pclk1_value() / RISE_FREQ_FM_PLUS_MAX);
	}
	arg_ptr_oi2c_handler->m_poi2c_reg->TRISE &= ~(SIX_BIT);
	arg_ptr_oi2c_handler->m_poi2c_reg->TRISE |= (loc_u8trise & SIX_BIT);
}

uint8_t i2c_master_send_data_it(i2c_handle_t *arg_poi2c_handler,
		uint8_t *arg_pu8tx_buffer, uint32_t arg_u32len,
		uint8_t arg_u8slave_addr, uint8_t arg_u8repeated_start) {
	uint8_t loc_u8busy_state = arg_poi2c_handler->m_u8rx_tx_state;
	if (I2C_READY == loc_u8busy_state) {
		arg_poi2c_handler->m_pu8tx_buffer = arg_pu8tx_buffer;
		arg_poi2c_handler->m_u32tx_len = arg_u32len;
		arg_poi2c_handler->m_u8sr = arg_u8repeated_start;
		arg_poi2c_handler->m_u8dev_addr = arg_u8slave_addr;
		arg_poi2c_handler->m_u8rx_tx_state = I2C_BUSY_IN_TX;

		/*!< Start condition >*/
		i2c_generate_start_condition(arg_poi2c_handler->m_poi2c_reg);

		/*!< enable ITBUFEN control bit >*/
		arg_poi2c_handler->m_poi2c_reg->CR2 |= I2C_CR2_ITBUFEN;

		/*!< enable ITEVFEN control bit >*/
		arg_poi2c_handler->m_poi2c_reg->CR2 |= I2C_CR2_ITEVTEN;

		/*!< enable ITERREN control bit >*/
		arg_poi2c_handler->m_poi2c_reg->CR2 |= I2C_CR2_ITERREN;
		/*!<  >*/
	}

	return loc_u8busy_state;
}
uint8_t i2c_master_receive_data_it(i2c_handle_t *arg_poi2c_handler,
		uint8_t *arg_pu8rx_buffer, uint32_t arg_u32len,
		uint8_t arg_u8slave_addr, uint8_t arg_u8repeated_start) {
	uint8_t loc_u8busy_state = arg_poi2c_handler->m_u8rx_tx_state;

	if (I2C_READY == loc_u8busy_state) {
		arg_poi2c_handler->m_pu8rx_buffer = arg_pu8rx_buffer;
		arg_poi2c_handler->m_u32rx_len = arg_u32len;
		arg_poi2c_handler->m_u8sr = arg_u8repeated_start;
		arg_poi2c_handler->m_u8dev_addr = arg_u8slave_addr;
		arg_poi2c_handler->m_u8rx_tx_state = I2C_BUSY_IN_RX;

		/*!< Start condition >*/
		i2c_generate_start_condition(arg_poi2c_handler->m_poi2c_reg);

		/*!< enable ITBUFEN control bit >*/
		arg_poi2c_handler->m_poi2c_reg->CR2 |= I2C_CR2_ITBUFEN;

		/*!< enable ITEVFEN control bit >*/
		arg_poi2c_handler->m_poi2c_reg->CR2 |= I2C_CR2_ITEVTEN;

		/*!< enable ITERREN control bit >*/
		arg_poi2c_handler->m_poi2c_reg->CR2 |= I2C_CR2_ITERREN;
		/*!<  >*/
	}

	return loc_u8busy_state;
}

void i2c_master_send_data(i2c_handle_t *arg_ptr_oi2c_handler,
		uint8_t *arg_ptr_u8tx_buffer, uint32_t arg_u32len,
		uint8_t arg_u8slave_addr, uint8_t arg_u8repeated_start) {
	/*!< 1. Generate the START condition*/
	i2c_generate_start_condition(arg_ptr_oi2c_handler->m_poi2c_reg);

	/*!< 2. Confirm that the start generation is completed by checking the SB flag in the SR1 reg
	 * Note: Until SB is cleared SCL will be stretched (pulled to low)*/
	while (FLAG_RESET == i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
	I2C_FLAG_SB))
		;

	/*!< 3. Send the address of slave with r/w bit set to w (0) (total 8 bits)*/
	i2c_execute_addr_phase_write(arg_ptr_oi2c_handler->m_poi2c_reg,
			arg_u8slave_addr);
	//arg_ptr_oi2c_handler->ptr_oi2c->DR = (uint8_t) (arg_u8slave_addr & SEVEN_BIT);

	/*!< 4. Confirm that the address phase is completed by checking the ADDR flag in the SR1*/
	while (FLAG_RESET == i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
	I2C_FLAG_ADDR))
		;

	/*!< 5. Clear the ADDR flag according to its software sequence
	 * Note: Until ADDR is cleared SCL will be stretched (pulled to low)*/
	i2c_clear_ADDR_flag(arg_ptr_oi2c_handler);

	/*!< 6. Send the data until len becomes 0*/
	while (arg_u32len > 0) {
		while (FLAG_RESET
				== i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
				I2C_FLAG_TXE))
			;
		arg_ptr_oi2c_handler->m_poi2c_reg->DR = *arg_ptr_u8tx_buffer;
		++arg_ptr_u8tx_buffer;
		--arg_u32len;
	}

	/*!< 7. When len becomes 0 wait for TXE = 1 and BTF = 1 before generating the STOP condition
	 * Note: TXE = 1, BTF = 1, means both SR (shift reg) & DR (data reg) are empty and next transmission should begin
	 * When BTF = 1 SCL will be stretched (pulled to LOW)*/
	while (FLAG_RESET == i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
	I2C_FLAG_TXE))
		;
	while (FLAG_RESET == i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
	I2C_FLAG_BTF))
		;

	/*!< 8. Generate STOP condition and master need not to wait for the completion of stop condition.
	 * Note: generating STOP, automatically clears the BTF*/
	if (I2C_REPEAT_START_NO == arg_u8repeated_start) {
		i2c_generate_stop_condition(arg_ptr_oi2c_handler->m_poi2c_reg);
	}
}

void i2c_master_receive_data(i2c_handle_t *arg_ptr_oi2c_handler,
		uint8_t *arg_ptr_u8rx_buffer, uint32_t arg_u32len,
		uint8_t arg_u8slave_addr, uint8_t arg_u8repeated_start) {
	/*!< 1. Generate the START condition*/
	i2c_generate_start_condition(arg_ptr_oi2c_handler->m_poi2c_reg);

	/*!< 2. Confirm that the start generation is completed by checking the SB flag in the SR1 reg
	 * Note: Until SB is cleared SCL will be stretched (pulled to low)*/
	while (FLAG_RESET == i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
	I2C_FLAG_SB))
		;

	/*!< 3. Send the address of slave with r/w bit set to r (1) (total 8 bits)*/
	i2c_execute_addr_phase_read(arg_ptr_oi2c_handler->m_poi2c_reg,
			arg_u8slave_addr);
	//arg_ptr_oi2c_handler->ptr_oi2c->DR = (uint8_t) (arg_u8slave_addr & SEVEN_BIT);

	/*!< 4. Confirm that the address phase is completed by checking the ADDR flag in the SR1*/
	while (FLAG_RESET == i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
	I2C_FLAG_ADDR))
		;

	if (arg_u32len <= 1U) {
		/*!< 5. Disable acking*/
		i2c_manage_ack(arg_ptr_oi2c_handler->m_poi2c_reg, I2C_ACK_DI);

		/*!< 6. clear addr flag*/
		i2c_clear_ADDR_flag(arg_ptr_oi2c_handler->m_poi2c_reg);

		/*!< 7. wait until RXNEbecomes 1*/
		while (FLAG_RESET
				== i2c_get_flag_status(arg_ptr_oi2c_handler->m_poi2c_reg,
				I2C_FLAG_RXNE))
			;

		/*!< 8. generate STOP condition*/
		if (I2C_REPEAT_START_NO == arg_u8repeated_start) {
			i2c_generate_stop_condition(arg_ptr_oi2c_handler->m_poi2c_reg);
		}

		/*!< 9. read data into buffer*/
		*arg_ptr_u8rx_buffer = (uint8_t) arg_ptr_oi2c_handler->m_poi2c_reg->DR;

	} else {

		/*!< 10. clear addr flag*/
		i2c_clear_ADDR_flag(arg_ptr_oi2c_handler->m_poi2c_reg);

		/*!< 11. read the data until arg_u32len becomes 1*/
		for (uint32_t loc_u32index = arg_u32len; loc_u32index > 0U;
				--loc_u32index) {
			/*!< 11.1. wait until RXNEbecomes 1*/

			if (loc_u32index <= 2) {
				/*!< 11.2. Disable acking*/
				i2c_manage_ack(arg_ptr_oi2c_handler->m_poi2c_reg, I2C_ACK_DI);

				/*!< 11.3. generate STOP condition*/
				if (I2C_REPEAT_START_NO == arg_u8repeated_start) {
					i2c_generate_stop_condition(
							arg_ptr_oi2c_handler->m_poi2c_reg);
				}
			}

			/*!< 11.4. read data into buffer*/
			*arg_ptr_u8rx_buffer =
					(uint8_t) arg_ptr_oi2c_handler->m_poi2c_reg->DR;

			/*!< 11.5 increment the buffer address*/
			++arg_ptr_u8rx_buffer;

		}

	}

	/*!< 12. re-enable acking*/
	if (I2C_ACK_EN == arg_ptr_oi2c_handler->m_poi2c_sconfig->ack_control) {
		i2c_manage_ack(arg_ptr_oi2c_handler->m_poi2c_reg, I2C_ACK_EN);
	}
}

uint8_t i2c_get_flag_status(i2c_reg_t *arg_ptr_i2c, uint32_t arg_u8flag) {
	uint8_t loc_u8flag = 0;
	if (arg_ptr_i2c->SR1 & arg_u8flag) {
		loc_u8flag = FLAG_SET;
	} else {
		loc_u8flag = FLAG_RESET;
	}
	return loc_u8flag;
}
